# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MarginOrderInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            baseQuantity = schemas.StrSchema
            clientOid = schemas.StrSchema
            ctime = schemas.StrSchema
            fillPrice = schemas.StrSchema
            fillQuantity = schemas.StrSchema
            fillTotalAmount = schemas.StrSchema
            loanType = schemas.StrSchema
            orderId = schemas.StrSchema
            orderType = schemas.StrSchema
            price = schemas.StrSchema
            quoteAmount = schemas.StrSchema
            side = schemas.StrSchema
            source = schemas.StrSchema
            status = schemas.StrSchema
            symbol = schemas.StrSchema
            __annotations__ = {
                "baseQuantity": baseQuantity,
                "clientOid": clientOid,
                "ctime": ctime,
                "fillPrice": fillPrice,
                "fillQuantity": fillQuantity,
                "fillTotalAmount": fillTotalAmount,
                "loanType": loanType,
                "orderId": orderId,
                "orderType": orderType,
                "price": price,
                "quoteAmount": quoteAmount,
                "side": side,
                "source": source,
                "status": status,
                "symbol": symbol,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseQuantity"]) -> MetaOapg.properties.baseQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientOid"]) -> MetaOapg.properties.clientOid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctime"]) -> MetaOapg.properties.ctime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillPrice"]) -> MetaOapg.properties.fillPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillQuantity"]) -> MetaOapg.properties.fillQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillTotalAmount"]) -> MetaOapg.properties.fillTotalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanType"]) -> MetaOapg.properties.loanType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderType"]) -> MetaOapg.properties.orderType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quoteAmount"]) -> MetaOapg.properties.quoteAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["side"]) -> MetaOapg.properties.side: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["baseQuantity", "clientOid", "ctime", "fillPrice", "fillQuantity", "fillTotalAmount", "loanType", "orderId", "orderType", "price", "quoteAmount", "side", "source", "status", "symbol", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseQuantity"]) -> typing.Union[MetaOapg.properties.baseQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientOid"]) -> typing.Union[MetaOapg.properties.clientOid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctime"]) -> typing.Union[MetaOapg.properties.ctime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillPrice"]) -> typing.Union[MetaOapg.properties.fillPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillQuantity"]) -> typing.Union[MetaOapg.properties.fillQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillTotalAmount"]) -> typing.Union[MetaOapg.properties.fillTotalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanType"]) -> typing.Union[MetaOapg.properties.loanType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderId"]) -> typing.Union[MetaOapg.properties.orderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderType"]) -> typing.Union[MetaOapg.properties.orderType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quoteAmount"]) -> typing.Union[MetaOapg.properties.quoteAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union[MetaOapg.properties.side, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["baseQuantity", "clientOid", "ctime", "fillPrice", "fillQuantity", "fillTotalAmount", "loanType", "orderId", "orderType", "price", "quoteAmount", "side", "source", "status", "symbol", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        baseQuantity: typing.Union[MetaOapg.properties.baseQuantity, str, schemas.Unset] = schemas.unset,
        clientOid: typing.Union[MetaOapg.properties.clientOid, str, schemas.Unset] = schemas.unset,
        ctime: typing.Union[MetaOapg.properties.ctime, str, schemas.Unset] = schemas.unset,
        fillPrice: typing.Union[MetaOapg.properties.fillPrice, str, schemas.Unset] = schemas.unset,
        fillQuantity: typing.Union[MetaOapg.properties.fillQuantity, str, schemas.Unset] = schemas.unset,
        fillTotalAmount: typing.Union[MetaOapg.properties.fillTotalAmount, str, schemas.Unset] = schemas.unset,
        loanType: typing.Union[MetaOapg.properties.loanType, str, schemas.Unset] = schemas.unset,
        orderId: typing.Union[MetaOapg.properties.orderId, str, schemas.Unset] = schemas.unset,
        orderType: typing.Union[MetaOapg.properties.orderType, str, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, str, schemas.Unset] = schemas.unset,
        quoteAmount: typing.Union[MetaOapg.properties.quoteAmount, str, schemas.Unset] = schemas.unset,
        side: typing.Union[MetaOapg.properties.side, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarginOrderInfo':
        return super().__new__(
            cls,
            *args,
            baseQuantity=baseQuantity,
            clientOid=clientOid,
            ctime=ctime,
            fillPrice=fillPrice,
            fillQuantity=fillQuantity,
            fillTotalAmount=fillTotalAmount,
            loanType=loanType,
            orderId=orderId,
            orderType=orderType,
            price=price,
            quoteAmount=quoteAmount,
            side=side,
            source=source,
            status=status,
            symbol=symbol,
            _configuration=_configuration,
            **kwargs,
        )
