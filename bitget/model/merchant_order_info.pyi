# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MerchantOrderInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            advNo = schemas.StrSchema
            amount = schemas.StrSchema
            buyerRealName = schemas.StrSchema
            coin = schemas.StrSchema
            count = schemas.StrSchema
            ctime = schemas.StrSchema
            fiat = schemas.StrSchema
            orderId = schemas.StrSchema
            orderNo = schemas.StrSchema
        
            @staticmethod
            def paymentInfo() -> typing.Type['MerchantOrderPaymentInfo']:
                return MerchantOrderPaymentInfo
            paymentTime = schemas.StrSchema
            price = schemas.StrSchema
            releaseCoinTime = schemas.StrSchema
            representTime = schemas.StrSchema
            sellerRealName = schemas.StrSchema
            status = schemas.StrSchema
            type = schemas.StrSchema
            withdrawTime = schemas.StrSchema
            __annotations__ = {
                "advNo": advNo,
                "amount": amount,
                "buyerRealName": buyerRealName,
                "coin": coin,
                "count": count,
                "ctime": ctime,
                "fiat": fiat,
                "orderId": orderId,
                "orderNo": orderNo,
                "paymentInfo": paymentInfo,
                "paymentTime": paymentTime,
                "price": price,
                "releaseCoinTime": releaseCoinTime,
                "representTime": representTime,
                "sellerRealName": sellerRealName,
                "status": status,
                "type": type,
                "withdrawTime": withdrawTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advNo"]) -> MetaOapg.properties.advNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyerRealName"]) -> MetaOapg.properties.buyerRealName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coin"]) -> MetaOapg.properties.coin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctime"]) -> MetaOapg.properties.ctime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fiat"]) -> MetaOapg.properties.fiat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderNo"]) -> MetaOapg.properties.orderNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentInfo"]) -> 'MerchantOrderPaymentInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentTime"]) -> MetaOapg.properties.paymentTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseCoinTime"]) -> MetaOapg.properties.releaseCoinTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["representTime"]) -> MetaOapg.properties.representTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellerRealName"]) -> MetaOapg.properties.sellerRealName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["withdrawTime"]) -> MetaOapg.properties.withdrawTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["advNo", "amount", "buyerRealName", "coin", "count", "ctime", "fiat", "orderId", "orderNo", "paymentInfo", "paymentTime", "price", "releaseCoinTime", "representTime", "sellerRealName", "status", "type", "withdrawTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advNo"]) -> typing.Union[MetaOapg.properties.advNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyerRealName"]) -> typing.Union[MetaOapg.properties.buyerRealName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coin"]) -> typing.Union[MetaOapg.properties.coin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctime"]) -> typing.Union[MetaOapg.properties.ctime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fiat"]) -> typing.Union[MetaOapg.properties.fiat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderId"]) -> typing.Union[MetaOapg.properties.orderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderNo"]) -> typing.Union[MetaOapg.properties.orderNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentInfo"]) -> typing.Union['MerchantOrderPaymentInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentTime"]) -> typing.Union[MetaOapg.properties.paymentTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseCoinTime"]) -> typing.Union[MetaOapg.properties.releaseCoinTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["representTime"]) -> typing.Union[MetaOapg.properties.representTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellerRealName"]) -> typing.Union[MetaOapg.properties.sellerRealName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["withdrawTime"]) -> typing.Union[MetaOapg.properties.withdrawTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["advNo", "amount", "buyerRealName", "coin", "count", "ctime", "fiat", "orderId", "orderNo", "paymentInfo", "paymentTime", "price", "releaseCoinTime", "representTime", "sellerRealName", "status", "type", "withdrawTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        advNo: typing.Union[MetaOapg.properties.advNo, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        buyerRealName: typing.Union[MetaOapg.properties.buyerRealName, str, schemas.Unset] = schemas.unset,
        coin: typing.Union[MetaOapg.properties.coin, str, schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, str, schemas.Unset] = schemas.unset,
        ctime: typing.Union[MetaOapg.properties.ctime, str, schemas.Unset] = schemas.unset,
        fiat: typing.Union[MetaOapg.properties.fiat, str, schemas.Unset] = schemas.unset,
        orderId: typing.Union[MetaOapg.properties.orderId, str, schemas.Unset] = schemas.unset,
        orderNo: typing.Union[MetaOapg.properties.orderNo, str, schemas.Unset] = schemas.unset,
        paymentInfo: typing.Union['MerchantOrderPaymentInfo', schemas.Unset] = schemas.unset,
        paymentTime: typing.Union[MetaOapg.properties.paymentTime, str, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, str, schemas.Unset] = schemas.unset,
        releaseCoinTime: typing.Union[MetaOapg.properties.releaseCoinTime, str, schemas.Unset] = schemas.unset,
        representTime: typing.Union[MetaOapg.properties.representTime, str, schemas.Unset] = schemas.unset,
        sellerRealName: typing.Union[MetaOapg.properties.sellerRealName, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        withdrawTime: typing.Union[MetaOapg.properties.withdrawTime, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantOrderInfo':
        return super().__new__(
            cls,
            *args,
            advNo=advNo,
            amount=amount,
            buyerRealName=buyerRealName,
            coin=coin,
            count=count,
            ctime=ctime,
            fiat=fiat,
            orderId=orderId,
            orderNo=orderNo,
            paymentInfo=paymentInfo,
            paymentTime=paymentTime,
            price=price,
            releaseCoinTime=releaseCoinTime,
            representTime=representTime,
            sellerRealName=sellerRealName,
            status=status,
            type=type,
            withdrawTime=withdrawTime,
            _configuration=_configuration,
            **kwargs,
        )

from bitget.model.merchant_order_payment_info import MerchantOrderPaymentInfo
