# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MarginSystemResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            baseCoin = schemas.StrSchema
            isBorrowable = schemas.BoolSchema
            liquidationRiskRatio = schemas.StrSchema
            makerFeeRate = schemas.StrSchema
            maxCrossLeverage = schemas.StrSchema
            maxIsolatedLeverage = schemas.StrSchema
            maxTradeAmount = schemas.StrSchema
            minTradeAmount = schemas.StrSchema
            minTradeUSDT = schemas.StrSchema
            priceScale = schemas.StrSchema
            quantityScale = schemas.StrSchema
            quoteCoin = schemas.StrSchema
            status = schemas.StrSchema
            symbol = schemas.StrSchema
            takerFeeRate = schemas.StrSchema
            userMinBorrow = schemas.StrSchema
            warningRiskRatio = schemas.StrSchema
            __annotations__ = {
                "baseCoin": baseCoin,
                "isBorrowable": isBorrowable,
                "liquidationRiskRatio": liquidationRiskRatio,
                "makerFeeRate": makerFeeRate,
                "maxCrossLeverage": maxCrossLeverage,
                "maxIsolatedLeverage": maxIsolatedLeverage,
                "maxTradeAmount": maxTradeAmount,
                "minTradeAmount": minTradeAmount,
                "minTradeUSDT": minTradeUSDT,
                "priceScale": priceScale,
                "quantityScale": quantityScale,
                "quoteCoin": quoteCoin,
                "status": status,
                "symbol": symbol,
                "takerFeeRate": takerFeeRate,
                "userMinBorrow": userMinBorrow,
                "warningRiskRatio": warningRiskRatio,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseCoin"]) -> MetaOapg.properties.baseCoin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBorrowable"]) -> MetaOapg.properties.isBorrowable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liquidationRiskRatio"]) -> MetaOapg.properties.liquidationRiskRatio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["makerFeeRate"]) -> MetaOapg.properties.makerFeeRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxCrossLeverage"]) -> MetaOapg.properties.maxCrossLeverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxIsolatedLeverage"]) -> MetaOapg.properties.maxIsolatedLeverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxTradeAmount"]) -> MetaOapg.properties.maxTradeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minTradeAmount"]) -> MetaOapg.properties.minTradeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minTradeUSDT"]) -> MetaOapg.properties.minTradeUSDT: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceScale"]) -> MetaOapg.properties.priceScale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantityScale"]) -> MetaOapg.properties.quantityScale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quoteCoin"]) -> MetaOapg.properties.quoteCoin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["takerFeeRate"]) -> MetaOapg.properties.takerFeeRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userMinBorrow"]) -> MetaOapg.properties.userMinBorrow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warningRiskRatio"]) -> MetaOapg.properties.warningRiskRatio: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["baseCoin", "isBorrowable", "liquidationRiskRatio", "makerFeeRate", "maxCrossLeverage", "maxIsolatedLeverage", "maxTradeAmount", "minTradeAmount", "minTradeUSDT", "priceScale", "quantityScale", "quoteCoin", "status", "symbol", "takerFeeRate", "userMinBorrow", "warningRiskRatio", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseCoin"]) -> typing.Union[MetaOapg.properties.baseCoin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBorrowable"]) -> typing.Union[MetaOapg.properties.isBorrowable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liquidationRiskRatio"]) -> typing.Union[MetaOapg.properties.liquidationRiskRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["makerFeeRate"]) -> typing.Union[MetaOapg.properties.makerFeeRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxCrossLeverage"]) -> typing.Union[MetaOapg.properties.maxCrossLeverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxIsolatedLeverage"]) -> typing.Union[MetaOapg.properties.maxIsolatedLeverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxTradeAmount"]) -> typing.Union[MetaOapg.properties.maxTradeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minTradeAmount"]) -> typing.Union[MetaOapg.properties.minTradeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minTradeUSDT"]) -> typing.Union[MetaOapg.properties.minTradeUSDT, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceScale"]) -> typing.Union[MetaOapg.properties.priceScale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantityScale"]) -> typing.Union[MetaOapg.properties.quantityScale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quoteCoin"]) -> typing.Union[MetaOapg.properties.quoteCoin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["takerFeeRate"]) -> typing.Union[MetaOapg.properties.takerFeeRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userMinBorrow"]) -> typing.Union[MetaOapg.properties.userMinBorrow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warningRiskRatio"]) -> typing.Union[MetaOapg.properties.warningRiskRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["baseCoin", "isBorrowable", "liquidationRiskRatio", "makerFeeRate", "maxCrossLeverage", "maxIsolatedLeverage", "maxTradeAmount", "minTradeAmount", "minTradeUSDT", "priceScale", "quantityScale", "quoteCoin", "status", "symbol", "takerFeeRate", "userMinBorrow", "warningRiskRatio", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        baseCoin: typing.Union[MetaOapg.properties.baseCoin, str, schemas.Unset] = schemas.unset,
        isBorrowable: typing.Union[MetaOapg.properties.isBorrowable, bool, schemas.Unset] = schemas.unset,
        liquidationRiskRatio: typing.Union[MetaOapg.properties.liquidationRiskRatio, str, schemas.Unset] = schemas.unset,
        makerFeeRate: typing.Union[MetaOapg.properties.makerFeeRate, str, schemas.Unset] = schemas.unset,
        maxCrossLeverage: typing.Union[MetaOapg.properties.maxCrossLeverage, str, schemas.Unset] = schemas.unset,
        maxIsolatedLeverage: typing.Union[MetaOapg.properties.maxIsolatedLeverage, str, schemas.Unset] = schemas.unset,
        maxTradeAmount: typing.Union[MetaOapg.properties.maxTradeAmount, str, schemas.Unset] = schemas.unset,
        minTradeAmount: typing.Union[MetaOapg.properties.minTradeAmount, str, schemas.Unset] = schemas.unset,
        minTradeUSDT: typing.Union[MetaOapg.properties.minTradeUSDT, str, schemas.Unset] = schemas.unset,
        priceScale: typing.Union[MetaOapg.properties.priceScale, str, schemas.Unset] = schemas.unset,
        quantityScale: typing.Union[MetaOapg.properties.quantityScale, str, schemas.Unset] = schemas.unset,
        quoteCoin: typing.Union[MetaOapg.properties.quoteCoin, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        takerFeeRate: typing.Union[MetaOapg.properties.takerFeeRate, str, schemas.Unset] = schemas.unset,
        userMinBorrow: typing.Union[MetaOapg.properties.userMinBorrow, str, schemas.Unset] = schemas.unset,
        warningRiskRatio: typing.Union[MetaOapg.properties.warningRiskRatio, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarginSystemResult':
        return super().__new__(
            cls,
            *args,
            baseCoin=baseCoin,
            isBorrowable=isBorrowable,
            liquidationRiskRatio=liquidationRiskRatio,
            makerFeeRate=makerFeeRate,
            maxCrossLeverage=maxCrossLeverage,
            maxIsolatedLeverage=maxIsolatedLeverage,
            maxTradeAmount=maxTradeAmount,
            minTradeAmount=minTradeAmount,
            minTradeUSDT=minTradeUSDT,
            priceScale=priceScale,
            quantityScale=quantityScale,
            quoteCoin=quoteCoin,
            status=status,
            symbol=symbol,
            takerFeeRate=takerFeeRate,
            userMinBorrow=userMinBorrow,
            warningRiskRatio=warningRiskRatio,
            _configuration=_configuration,
            **kwargs,
        )
