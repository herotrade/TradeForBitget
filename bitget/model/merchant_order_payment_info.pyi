# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MerchantOrderPaymentInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            paymethodId = schemas.StrSchema
            
            
            class paymethodInfo(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OrderPaymentDetailInfo']:
                        return OrderPaymentDetailInfo
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OrderPaymentDetailInfo'], typing.List['OrderPaymentDetailInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymethodInfo':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OrderPaymentDetailInfo':
                    return super().__getitem__(i)
            paymethodName = schemas.StrSchema
            __annotations__ = {
                "paymethodId": paymethodId,
                "paymethodInfo": paymethodInfo,
                "paymethodName": paymethodName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymethodId"]) -> MetaOapg.properties.paymethodId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymethodInfo"]) -> MetaOapg.properties.paymethodInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymethodName"]) -> MetaOapg.properties.paymethodName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paymethodId", "paymethodInfo", "paymethodName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymethodId"]) -> typing.Union[MetaOapg.properties.paymethodId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymethodInfo"]) -> typing.Union[MetaOapg.properties.paymethodInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymethodName"]) -> typing.Union[MetaOapg.properties.paymethodName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paymethodId", "paymethodInfo", "paymethodName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paymethodId: typing.Union[MetaOapg.properties.paymethodId, str, schemas.Unset] = schemas.unset,
        paymethodInfo: typing.Union[MetaOapg.properties.paymethodInfo, list, tuple, schemas.Unset] = schemas.unset,
        paymethodName: typing.Union[MetaOapg.properties.paymethodName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantOrderPaymentInfo':
        return super().__new__(
            cls,
            *args,
            paymethodId=paymethodId,
            paymethodInfo=paymethodInfo,
            paymethodName=paymethodName,
            _configuration=_configuration,
            **kwargs,
        )

from bitget.model.order_payment_detail_info import OrderPaymentDetailInfo
