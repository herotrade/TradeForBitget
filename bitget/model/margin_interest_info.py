# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MarginInterestInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.StrSchema
            ctime = schemas.StrSchema
            interestCoin = schemas.StrSchema
            interestId = schemas.StrSchema
            interestRate = schemas.StrSchema
            loanCoin = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "ctime": ctime,
                "interestCoin": interestCoin,
                "interestId": interestId,
                "interestRate": interestRate,
                "loanCoin": loanCoin,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctime"]) -> MetaOapg.properties.ctime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestCoin"]) -> MetaOapg.properties.interestCoin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestId"]) -> MetaOapg.properties.interestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestRate"]) -> MetaOapg.properties.interestRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loanCoin"]) -> MetaOapg.properties.loanCoin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "ctime", "interestCoin", "interestId", "interestRate", "loanCoin", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctime"]) -> typing.Union[MetaOapg.properties.ctime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestCoin"]) -> typing.Union[MetaOapg.properties.interestCoin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestId"]) -> typing.Union[MetaOapg.properties.interestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestRate"]) -> typing.Union[MetaOapg.properties.interestRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loanCoin"]) -> typing.Union[MetaOapg.properties.loanCoin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "ctime", "interestCoin", "interestId", "interestRate", "loanCoin", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        ctime: typing.Union[MetaOapg.properties.ctime, str, schemas.Unset] = schemas.unset,
        interestCoin: typing.Union[MetaOapg.properties.interestCoin, str, schemas.Unset] = schemas.unset,
        interestId: typing.Union[MetaOapg.properties.interestId, str, schemas.Unset] = schemas.unset,
        interestRate: typing.Union[MetaOapg.properties.interestRate, str, schemas.Unset] = schemas.unset,
        loanCoin: typing.Union[MetaOapg.properties.loanCoin, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarginInterestInfo':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            ctime=ctime,
            interestCoin=interestCoin,
            interestId=interestId,
            interestRate=interestRate,
            loanCoin=loanCoin,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
