# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MarginIsolatedAssetsPopulationResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            available = schemas.StrSchema
            borrow = schemas.StrSchema
            coin = schemas.StrSchema
            ctime = schemas.StrSchema
            frozen = schemas.StrSchema
            interest = schemas.StrSchema
            net = schemas.StrSchema
            symbol = schemas.StrSchema
            totalAmount = schemas.StrSchema
            __annotations__ = {
                "available": available,
                "borrow": borrow,
                "coin": coin,
                "ctime": ctime,
                "frozen": frozen,
                "interest": interest,
                "net": net,
                "symbol": symbol,
                "totalAmount": totalAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available"]) -> MetaOapg.properties.available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borrow"]) -> MetaOapg.properties.borrow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coin"]) -> MetaOapg.properties.coin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctime"]) -> MetaOapg.properties.ctime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frozen"]) -> MetaOapg.properties.frozen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interest"]) -> MetaOapg.properties.interest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net"]) -> MetaOapg.properties.net: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAmount"]) -> MetaOapg.properties.totalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["available", "borrow", "coin", "ctime", "frozen", "interest", "net", "symbol", "totalAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available"]) -> typing.Union[MetaOapg.properties.available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borrow"]) -> typing.Union[MetaOapg.properties.borrow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coin"]) -> typing.Union[MetaOapg.properties.coin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctime"]) -> typing.Union[MetaOapg.properties.ctime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frozen"]) -> typing.Union[MetaOapg.properties.frozen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interest"]) -> typing.Union[MetaOapg.properties.interest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net"]) -> typing.Union[MetaOapg.properties.net, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAmount"]) -> typing.Union[MetaOapg.properties.totalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["available", "borrow", "coin", "ctime", "frozen", "interest", "net", "symbol", "totalAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        available: typing.Union[MetaOapg.properties.available, str, schemas.Unset] = schemas.unset,
        borrow: typing.Union[MetaOapg.properties.borrow, str, schemas.Unset] = schemas.unset,
        coin: typing.Union[MetaOapg.properties.coin, str, schemas.Unset] = schemas.unset,
        ctime: typing.Union[MetaOapg.properties.ctime, str, schemas.Unset] = schemas.unset,
        frozen: typing.Union[MetaOapg.properties.frozen, str, schemas.Unset] = schemas.unset,
        interest: typing.Union[MetaOapg.properties.interest, str, schemas.Unset] = schemas.unset,
        net: typing.Union[MetaOapg.properties.net, str, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        totalAmount: typing.Union[MetaOapg.properties.totalAmount, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarginIsolatedAssetsPopulationResult':
        return super().__new__(
            cls,
            *args,
            available=available,
            borrow=borrow,
            coin=coin,
            ctime=ctime,
            frozen=frozen,
            interest=interest,
            net=net,
            symbol=symbol,
            totalAmount=totalAmount,
            _configuration=_configuration,
            **kwargs,
        )
