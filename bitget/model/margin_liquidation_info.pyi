# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MarginLiquidationInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ctime = schemas.StrSchema
            liqEndTime = schemas.StrSchema
            liqFee = schemas.StrSchema
            liqId = schemas.StrSchema
            liqRisk = schemas.StrSchema
            liqStartTime = schemas.StrSchema
            totalAssets = schemas.StrSchema
            totalDebt = schemas.StrSchema
            __annotations__ = {
                "ctime": ctime,
                "liqEndTime": liqEndTime,
                "liqFee": liqFee,
                "liqId": liqId,
                "liqRisk": liqRisk,
                "liqStartTime": liqStartTime,
                "totalAssets": totalAssets,
                "totalDebt": totalDebt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctime"]) -> MetaOapg.properties.ctime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liqEndTime"]) -> MetaOapg.properties.liqEndTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liqFee"]) -> MetaOapg.properties.liqFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liqId"]) -> MetaOapg.properties.liqId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liqRisk"]) -> MetaOapg.properties.liqRisk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liqStartTime"]) -> MetaOapg.properties.liqStartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAssets"]) -> MetaOapg.properties.totalAssets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDebt"]) -> MetaOapg.properties.totalDebt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ctime", "liqEndTime", "liqFee", "liqId", "liqRisk", "liqStartTime", "totalAssets", "totalDebt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctime"]) -> typing.Union[MetaOapg.properties.ctime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liqEndTime"]) -> typing.Union[MetaOapg.properties.liqEndTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liqFee"]) -> typing.Union[MetaOapg.properties.liqFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liqId"]) -> typing.Union[MetaOapg.properties.liqId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liqRisk"]) -> typing.Union[MetaOapg.properties.liqRisk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liqStartTime"]) -> typing.Union[MetaOapg.properties.liqStartTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAssets"]) -> typing.Union[MetaOapg.properties.totalAssets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDebt"]) -> typing.Union[MetaOapg.properties.totalDebt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ctime", "liqEndTime", "liqFee", "liqId", "liqRisk", "liqStartTime", "totalAssets", "totalDebt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ctime: typing.Union[MetaOapg.properties.ctime, str, schemas.Unset] = schemas.unset,
        liqEndTime: typing.Union[MetaOapg.properties.liqEndTime, str, schemas.Unset] = schemas.unset,
        liqFee: typing.Union[MetaOapg.properties.liqFee, str, schemas.Unset] = schemas.unset,
        liqId: typing.Union[MetaOapg.properties.liqId, str, schemas.Unset] = schemas.unset,
        liqRisk: typing.Union[MetaOapg.properties.liqRisk, str, schemas.Unset] = schemas.unset,
        liqStartTime: typing.Union[MetaOapg.properties.liqStartTime, str, schemas.Unset] = schemas.unset,
        totalAssets: typing.Union[MetaOapg.properties.totalAssets, str, schemas.Unset] = schemas.unset,
        totalDebt: typing.Union[MetaOapg.properties.totalDebt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarginLiquidationInfo':
        return super().__new__(
            cls,
            *args,
            ctime=ctime,
            liqEndTime=liqEndTime,
            liqFee=liqFee,
            liqId=liqId,
            liqRisk=liqRisk,
            liqStartTime=liqStartTime,
            totalAssets=totalAssets,
            totalDebt=totalDebt,
            _configuration=_configuration,
            **kwargs,
        )
