# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MerchantAdvInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            advId = schemas.StrSchema
            advNo = schemas.StrSchema
            amount = schemas.StrSchema
            coin = schemas.StrSchema
            coinPrecision = schemas.StrSchema
            ctime = schemas.StrSchema
            dealAmount = schemas.StrSchema
            fiatCode = schemas.StrSchema
            fiatPrecision = schemas.StrSchema
            fiatSymbol = schemas.StrSchema
            hide = schemas.StrSchema
            maxAmount = schemas.StrSchema
            minAmount = schemas.StrSchema
            payDuration = schemas.StrSchema
            
            
            class paymentMethod(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FiatPaymentInfo']:
                        return FiatPaymentInfo
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FiatPaymentInfo'], typing.List['FiatPaymentInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymentMethod':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FiatPaymentInfo':
                    return super().__getitem__(i)
            price = schemas.StrSchema
            remark = schemas.StrSchema
            status = schemas.StrSchema
            turnoverNum = schemas.StrSchema
            turnoverRate = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def userLimit() -> typing.Type['MerchantAdvUserLimitInfo']:
                return MerchantAdvUserLimitInfo
            __annotations__ = {
                "advId": advId,
                "advNo": advNo,
                "amount": amount,
                "coin": coin,
                "coinPrecision": coinPrecision,
                "ctime": ctime,
                "dealAmount": dealAmount,
                "fiatCode": fiatCode,
                "fiatPrecision": fiatPrecision,
                "fiatSymbol": fiatSymbol,
                "hide": hide,
                "maxAmount": maxAmount,
                "minAmount": minAmount,
                "payDuration": payDuration,
                "paymentMethod": paymentMethod,
                "price": price,
                "remark": remark,
                "status": status,
                "turnoverNum": turnoverNum,
                "turnoverRate": turnoverRate,
                "type": type,
                "userLimit": userLimit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advId"]) -> MetaOapg.properties.advId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advNo"]) -> MetaOapg.properties.advNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coin"]) -> MetaOapg.properties.coin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coinPrecision"]) -> MetaOapg.properties.coinPrecision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctime"]) -> MetaOapg.properties.ctime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dealAmount"]) -> MetaOapg.properties.dealAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fiatCode"]) -> MetaOapg.properties.fiatCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fiatPrecision"]) -> MetaOapg.properties.fiatPrecision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fiatSymbol"]) -> MetaOapg.properties.fiatSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hide"]) -> MetaOapg.properties.hide: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxAmount"]) -> MetaOapg.properties.maxAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minAmount"]) -> MetaOapg.properties.minAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDuration"]) -> MetaOapg.properties.payDuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethod"]) -> MetaOapg.properties.paymentMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remark"]) -> MetaOapg.properties.remark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["turnoverNum"]) -> MetaOapg.properties.turnoverNum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["turnoverRate"]) -> MetaOapg.properties.turnoverRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userLimit"]) -> 'MerchantAdvUserLimitInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["advId", "advNo", "amount", "coin", "coinPrecision", "ctime", "dealAmount", "fiatCode", "fiatPrecision", "fiatSymbol", "hide", "maxAmount", "minAmount", "payDuration", "paymentMethod", "price", "remark", "status", "turnoverNum", "turnoverRate", "type", "userLimit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advId"]) -> typing.Union[MetaOapg.properties.advId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advNo"]) -> typing.Union[MetaOapg.properties.advNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coin"]) -> typing.Union[MetaOapg.properties.coin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coinPrecision"]) -> typing.Union[MetaOapg.properties.coinPrecision, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctime"]) -> typing.Union[MetaOapg.properties.ctime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dealAmount"]) -> typing.Union[MetaOapg.properties.dealAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fiatCode"]) -> typing.Union[MetaOapg.properties.fiatCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fiatPrecision"]) -> typing.Union[MetaOapg.properties.fiatPrecision, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fiatSymbol"]) -> typing.Union[MetaOapg.properties.fiatSymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hide"]) -> typing.Union[MetaOapg.properties.hide, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxAmount"]) -> typing.Union[MetaOapg.properties.maxAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minAmount"]) -> typing.Union[MetaOapg.properties.minAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDuration"]) -> typing.Union[MetaOapg.properties.payDuration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethod"]) -> typing.Union[MetaOapg.properties.paymentMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remark"]) -> typing.Union[MetaOapg.properties.remark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["turnoverNum"]) -> typing.Union[MetaOapg.properties.turnoverNum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["turnoverRate"]) -> typing.Union[MetaOapg.properties.turnoverRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userLimit"]) -> typing.Union['MerchantAdvUserLimitInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["advId", "advNo", "amount", "coin", "coinPrecision", "ctime", "dealAmount", "fiatCode", "fiatPrecision", "fiatSymbol", "hide", "maxAmount", "minAmount", "payDuration", "paymentMethod", "price", "remark", "status", "turnoverNum", "turnoverRate", "type", "userLimit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        advId: typing.Union[MetaOapg.properties.advId, str, schemas.Unset] = schemas.unset,
        advNo: typing.Union[MetaOapg.properties.advNo, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        coin: typing.Union[MetaOapg.properties.coin, str, schemas.Unset] = schemas.unset,
        coinPrecision: typing.Union[MetaOapg.properties.coinPrecision, str, schemas.Unset] = schemas.unset,
        ctime: typing.Union[MetaOapg.properties.ctime, str, schemas.Unset] = schemas.unset,
        dealAmount: typing.Union[MetaOapg.properties.dealAmount, str, schemas.Unset] = schemas.unset,
        fiatCode: typing.Union[MetaOapg.properties.fiatCode, str, schemas.Unset] = schemas.unset,
        fiatPrecision: typing.Union[MetaOapg.properties.fiatPrecision, str, schemas.Unset] = schemas.unset,
        fiatSymbol: typing.Union[MetaOapg.properties.fiatSymbol, str, schemas.Unset] = schemas.unset,
        hide: typing.Union[MetaOapg.properties.hide, str, schemas.Unset] = schemas.unset,
        maxAmount: typing.Union[MetaOapg.properties.maxAmount, str, schemas.Unset] = schemas.unset,
        minAmount: typing.Union[MetaOapg.properties.minAmount, str, schemas.Unset] = schemas.unset,
        payDuration: typing.Union[MetaOapg.properties.payDuration, str, schemas.Unset] = schemas.unset,
        paymentMethod: typing.Union[MetaOapg.properties.paymentMethod, list, tuple, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, str, schemas.Unset] = schemas.unset,
        remark: typing.Union[MetaOapg.properties.remark, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        turnoverNum: typing.Union[MetaOapg.properties.turnoverNum, str, schemas.Unset] = schemas.unset,
        turnoverRate: typing.Union[MetaOapg.properties.turnoverRate, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        userLimit: typing.Union['MerchantAdvUserLimitInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantAdvInfo':
        return super().__new__(
            cls,
            *args,
            advId=advId,
            advNo=advNo,
            amount=amount,
            coin=coin,
            coinPrecision=coinPrecision,
            ctime=ctime,
            dealAmount=dealAmount,
            fiatCode=fiatCode,
            fiatPrecision=fiatPrecision,
            fiatSymbol=fiatSymbol,
            hide=hide,
            maxAmount=maxAmount,
            minAmount=minAmount,
            payDuration=payDuration,
            paymentMethod=paymentMethod,
            price=price,
            remark=remark,
            status=status,
            turnoverNum=turnoverNum,
            turnoverRate=turnoverRate,
            type=type,
            userLimit=userLimit,
            _configuration=_configuration,
            **kwargs,
        )

from bitget.model.fiat_payment_info import FiatPaymentInfo
from bitget.model.merchant_adv_user_limit_info import MerchantAdvUserLimitInfo
